/*
makeChocolate
http://codingbat.com/prob/p191363


We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.

makeChocolate(4, 1, 9) → 4
makeChocolate(4, 1, 10) → -1
makeChocolate(4, 1, 7) → 2
public int makeChocolate(int small, int big, int goal)
 */

func makeChocolate(_ small: Int, _ big: Int, _ goal: Int) -> Int {
 if big * 5 + small < goal {
     return -1
 }
 if (big * 5 > goal) {
     return (goal%5 > small) ? -1 : (goal%5)
 }
 return (goal - big * 5 > small) ? -1 : (goal - big * 5)
}


print(
makeChocolate(4, 1, 9),
makeChocolate(4, 1, 10),
makeChocolate(4, 1, 7),
makeChocolate(2, 2, 9)
)

/* Java Solution
public int makeChocolate(int small, int big, int goal) {
  if (big * 5 + small < goal) {
     return -1;
  }
  if (big * 5 > goal) {
     return (goal%5 > small) ? -1 : (goal%5);
  }
  return (goal - big * 5 > small) ? -1 : (goal - big * 5);
}

*/
